{
  "uid" : "ac6ac43eda5cec0e",
  "name" : "Search by NHS number [9470006143-TABBY FERN-20150222-CLEAR BECK HOUSE, TATHAM, LANCASTER, LA2 8PJ]",
  "fullName" : "/app/features/find_a_patient.feature:Search by NHS number",
  "historyId" : "d3c8a128e42732e8c43697d4afeb3b03",
  "time" : {
    "start" : 1723543265023,
    "stop" : 1723543599817,
    "duration" : 334794
  },
  "status" : "failed",
  "statusMessage" : "AssertionError: assert False == True\n +  where False = check_patient_nhs_number_search_result_exists('9470006143', True)",
  "statusTrace" : "fixturefunc = <function patient_information_page_should_be_available at 0x7f7972047420>\nrequest = <FixtureRequest for <Function test_search_by_nhs_number[9470006143-TABBY FERN-20150222-CLEAR BECK HOUSE, TATHAM, LANCASTER, LA2 8PJ]>>\nkwargs = {'address': 'CLEAR BECK HOUSE, TATHAM, LANCASTER, LA2 8PJ', 'dateofbirth': '20150222', 'name': 'TABBY FERN', 'nhsNumber': '9470006143'}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n.tox/py311/lib/python3.11/site-packages/_pytest/fixtures.py:897: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nname = 'TABBY FERN', nhsNumber = '9470006143', dateofbirth = '20150222'\naddress = 'CLEAR BECK HOUSE, TATHAM, LANCASTER, LA2 8PJ'\n\n    @then(parse(\"I should be directed to the patient's information page and show {name}, {nhsNumber}, {dateofbirth} and {address} details\"))\n    def patient_information_page_should_be_available(name, nhsNumber, dateofbirth, address):\n        attach_screenshot(\"patient_information_page_should_be_visible\")\n        if name.lower() != \"Not found\".lower():\n>           assert check_patient_nhs_number_search_result_exists(nhsNumber, True) == True\nE           AssertionError: assert False == True\nE            +  where False = check_patient_nhs_number_search_result_exists('9470006143', True)\n\ntests/test_find_a_patient_steps.py:186: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "newBroken" : false,
  "newPassed" : false,
  "retriesCount" : 0,
  "retriesStatusChange" : false,
  "beforeStages" : [ ],
  "testStage" : {
    "status" : "failed",
    "statusMessage" : "AssertionError: assert False == True\n +  where False = check_patient_nhs_number_search_result_exists('9470006143', True)",
    "statusTrace" : "fixturefunc = <function patient_information_page_should_be_available at 0x7f7972047420>\nrequest = <FixtureRequest for <Function test_search_by_nhs_number[9470006143-TABBY FERN-20150222-CLEAR BECK HOUSE, TATHAM, LANCASTER, LA2 8PJ]>>\nkwargs = {'address': 'CLEAR BECK HOUSE, TATHAM, LANCASTER, LA2 8PJ', 'dateofbirth': '20150222', 'name': 'TABBY FERN', 'nhsNumber': '9470006143'}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n.tox/py311/lib/python3.11/site-packages/_pytest/fixtures.py:897: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nname = 'TABBY FERN', nhsNumber = '9470006143', dateofbirth = '20150222'\naddress = 'CLEAR BECK HOUSE, TATHAM, LANCASTER, LA2 8PJ'\n\n    @then(parse(\"I should be directed to the patient's information page and show {name}, {nhsNumber}, {dateofbirth} and {address} details\"))\n    def patient_information_page_should_be_available(name, nhsNumber, dateofbirth, address):\n        attach_screenshot(\"patient_information_page_should_be_visible\")\n        if name.lower() != \"Not found\".lower():\n>           assert check_patient_nhs_number_search_result_exists(nhsNumber, True) == True\nE           AssertionError: assert False == True\nE            +  where False = check_patient_nhs_number_search_result_exists('9470006143', True)\n\ntests/test_find_a_patient_steps.py:186: AssertionError",
    "steps" : [ {
      "name" : "Given I am on the find a patient by nhs number page",
      "time" : {
        "start" : 1723543265024,
        "stop" : 1723543509263,
        "duration" : 244239
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ {
        "uid" : "ee8375d9d6d87bed",
        "name" : "qa_chrome_127.0.6533.99_user_has_selected_site.png",
        "source" : "ee8375d9d6d87bed.png",
        "type" : "image/png",
        "size" : 36674
      }, {
        "uid" : "5790bb86f0e15951",
        "name" : "qa_chrome_127.0.6533.99_user_has_selected_care_model.png",
        "source" : "5790bb86f0e15951.png",
        "type" : "image/png",
        "size" : 36754
      } ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 2,
      "shouldDisplayMessage" : false,
      "hasContent" : true
    }, {
      "name" : "When I enter a valid 9470006143",
      "time" : {
        "start" : 1723543509263,
        "stop" : 1723543539494,
        "duration" : 30231
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "And I click the search button",
      "time" : {
        "start" : 1723543539494,
        "stop" : 1723543569709,
        "duration" : 30215
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "Then I should be directed to the patient's information page and show TABBY FERN, 9470006143, 20150222 and CLEAR BECK HOUSE, TATHAM, LANCASTER, LA2 8PJ details",
      "time" : {
        "start" : 1723543569710,
        "stop" : 1723543599817,
        "duration" : 30107
      },
      "status" : "failed",
      "statusMessage" : "assert False == True\n +  where False = check_patient_nhs_number_search_result_exists('9470006143', True)",
      "statusTrace" : "AssertionError: assert False == True\n +  where False = check_patient_nhs_number_search_result_exists('9470006143', True)\n",
      "steps" : [ ],
      "attachments" : [ {
        "uid" : "94ad70c263fe9c64",
        "name" : "qa_chrome_127.0.6533.99_patient_information_page_should_be_visible.png",
        "source" : "94ad70c263fe9c64.png",
        "type" : "image/png",
        "size" : 52616
      } ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 1,
      "shouldDisplayMessage" : true,
      "hasContent" : true
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 4,
    "attachmentsCount" : 3,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "host",
    "value" : "8ce23f7813ad"
  }, {
    "name" : "thread",
    "value" : "1070-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest-bdd"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "feature",
    "value" : "Find a patient"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "address",
    "value" : "CLEAR BECK HOUSE, TATHAM, LANCASTER, LA2 8PJ"
  }, {
    "name" : "dateofbirth",
    "value" : "20150222"
  }, {
    "name" : "name",
    "value" : "TABBY FERN"
  }, {
    "name" : "nhsNumber",
    "value" : "9470006143"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ ]
  },
  "source" : "ac6ac43eda5cec0e.json",
  "parameterValues" : [ "CLEAR BECK HOUSE, TATHAM, LANCASTER, LA2 8PJ", "20150222", "TABBY FERN", "9470006143" ]
}