{
  "uid" : "5b88b8fb10819db1",
  "name" : "Demographics: Search without entering patient details shows errors on the mandatory fields [Enter the first name-Enter the last name-Enter the date of birth]",
  "fullName" : "/app/features/find_a_patient.feature:Demographics: Search without entering patient details shows errors on the mandatory fields",
  "historyId" : "ffd87a641da72571b8823162282d2883",
  "time" : {
    "start" : 1728573124519,
    "stop" : 1728573131564,
    "duration" : 7045
  },
  "status" : "failed",
  "statusMessage" : "AssertionError: assert False is True\n +  where False = check_first_name_error_message_text_exists()",
  "statusTrace" : "fixturefunc = <function step_error_message_appears_for_first_name at 0x7ff2497704a0>\nrequest = <FixtureRequest for <Function test_demographics_search_without_entering_patient_details_shows_errors_on_the_mandatory_fields[Enter the first name-Enter the last name-Enter the date of birth]>>\nkwargs = {'errorMessage': 'Enter the first name'}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n.tox/py311/lib/python3.11/site-packages/_pytest/fixtures.py:898: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nerrorMessage = 'Enter the first name'\n\n    @then(parse('I can see a first name error message {errorMessage}'))\n    def step_error_message_appears_for_first_name(errorMessage):\n        attach_screenshot(\"error_message_appears_for_first_name\")\n>       assert check_first_name_error_message_text_exists() is True\nE       assert False is True\nE        +  where False = check_first_name_error_message_text_exists()\n\ntests/test_find_a_patient_steps.py:145: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "newBroken" : false,
  "newPassed" : false,
  "retriesCount" : 0,
  "retriesStatusChange" : false,
  "beforeStages" : [ ],
  "testStage" : {
    "status" : "failed",
    "statusMessage" : "AssertionError: assert False is True\n +  where False = check_first_name_error_message_text_exists()",
    "statusTrace" : "fixturefunc = <function step_error_message_appears_for_first_name at 0x7ff2497704a0>\nrequest = <FixtureRequest for <Function test_demographics_search_without_entering_patient_details_shows_errors_on_the_mandatory_fields[Enter the first name-Enter the last name-Enter the date of birth]>>\nkwargs = {'errorMessage': 'Enter the first name'}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n.tox/py311/lib/python3.11/site-packages/_pytest/fixtures.py:898: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nerrorMessage = 'Enter the first name'\n\n    @then(parse('I can see a first name error message {errorMessage}'))\n    def step_error_message_appears_for_first_name(errorMessage):\n        attach_screenshot(\"error_message_appears_for_first_name\")\n>       assert check_first_name_error_message_text_exists() is True\nE       assert False is True\nE        +  where False = check_first_name_error_message_text_exists()\n\ntests/test_find_a_patient_steps.py:145: AssertionError",
    "steps" : [ {
      "name" : "Given I am on the find a patient by demographics page",
      "time" : {
        "start" : 1728573124520,
        "stop" : 1728573131284,
        "duration" : 6764
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "When I click the search button",
      "time" : {
        "start" : 1728573131285,
        "stop" : 1728573131421,
        "duration" : 136
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "Then I can see a first name error message Enter the first name",
      "time" : {
        "start" : 1728573131422,
        "stop" : 1728573131564,
        "duration" : 142
      },
      "status" : "failed",
      "statusMessage" : "assert False is True\n +  where False = check_first_name_error_message_text_exists()",
      "statusTrace" : "AssertionError: assert False is True\n +  where False = check_first_name_error_message_text_exists()\n",
      "steps" : [ ],
      "attachments" : [ {
        "uid" : "88f41b34d8da7eac",
        "name" : "data/attachments/dev_chrome_129.0.6668.100_error_message_appears_for_first_name.png",
        "source" : "88f41b34d8da7eac.png",
        "type" : "image/png",
        "size" : 66892
      } ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 1,
      "shouldDisplayMessage" : true,
      "hasContent" : true
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 3,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "host",
    "value" : "1d6251f1455e"
  }, {
    "name" : "thread",
    "value" : "1046-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest-bdd"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "feature",
    "value" : "Find a patient"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "dobError",
    "value" : "Enter the date of birth"
  }, {
    "name" : "firstNameError",
    "value" : "Enter the first name"
  }, {
    "name" : "lastNameError",
    "value" : "Enter the last name"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ ]
  },
  "source" : "5b88b8fb10819db1.json",
  "parameterValues" : [ "Enter the date of birth", "Enter the first name", "Enter the last name" ]
}