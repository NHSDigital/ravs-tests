{
  "uid" : "57d669e88f4f1558",
  "name" : "NHS Number: Searching with invalid NHS number shows an error [123456789-Enter 10 digits]",
  "fullName" : "/app/features/find_a_patient.feature:NHS Number: Searching with invalid NHS number shows an error",
  "historyId" : "f44352c612938e33e618f3f1b20aabf5",
  "time" : {
    "start" : 1730274889166,
    "stop" : 1730275062487,
    "duration" : 173321
  },
  "status" : "failed",
  "statusMessage" : "AssertionError: assert False is True\n +  where False = check_nhs_number_error_message_text_exists('Enter 10 digits')",
  "statusTrace" : "fixturefunc = <function step_error_message_appears_for_nhs_number at 0x7f138cd41620>\nrequest = <FixtureRequest for <Function test_nhs_number_searching_with_invalid_nhs_number_shows_an_error[123456789-Enter 10 digits]>>\nkwargs = {'errorMessage': 'Enter 10 digits'}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n.tox/py311/lib/python3.11/site-packages/_pytest/fixtures.py:898: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nerrorMessage = 'Enter 10 digits'\n\n    @then(parse('I can see an nhs number error message {errorMessage}'))\n    def step_error_message_appears_for_nhs_number(errorMessage):\n        attach_screenshot(\"error_message_appears_for_nhs_number\")\n>       assert check_nhs_number_error_message_text_exists(errorMessage) is True\nE       AssertionError: assert False is True\nE        +  where False = check_nhs_number_error_message_text_exists('Enter 10 digits')\n\ntests/test_find_a_patient_steps.py:135: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "newBroken" : false,
  "newPassed" : false,
  "retriesCount" : 0,
  "retriesStatusChange" : false,
  "beforeStages" : [ ],
  "testStage" : {
    "status" : "failed",
    "statusMessage" : "AssertionError: assert False is True\n +  where False = check_nhs_number_error_message_text_exists('Enter 10 digits')",
    "statusTrace" : "fixturefunc = <function step_error_message_appears_for_nhs_number at 0x7f138cd41620>\nrequest = <FixtureRequest for <Function test_nhs_number_searching_with_invalid_nhs_number_shows_an_error[123456789-Enter 10 digits]>>\nkwargs = {'errorMessage': 'Enter 10 digits'}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n.tox/py311/lib/python3.11/site-packages/_pytest/fixtures.py:898: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nerrorMessage = 'Enter 10 digits'\n\n    @then(parse('I can see an nhs number error message {errorMessage}'))\n    def step_error_message_appears_for_nhs_number(errorMessage):\n        attach_screenshot(\"error_message_appears_for_nhs_number\")\n>       assert check_nhs_number_error_message_text_exists(errorMessage) is True\nE       AssertionError: assert False is True\nE        +  where False = check_nhs_number_error_message_text_exists('Enter 10 digits')\n\ntests/test_find_a_patient_steps.py:135: AssertionError",
    "steps" : [ {
      "name" : "Given I am on the find a patient by nhs number page",
      "time" : {
        "start" : 1730274889167,
        "stop" : 1730275011637,
        "duration" : 122470
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "And I enter 123456789 as the nhs number",
      "time" : {
        "start" : 1730275011637,
        "stop" : 1730275031952,
        "duration" : 20315
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "When I click the search button",
      "time" : {
        "start" : 1730275031953,
        "stop" : 1730275052266,
        "duration" : 20313
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "Then I can see an nhs number error message Enter 10 digits",
      "time" : {
        "start" : 1730275052266,
        "stop" : 1730275062487,
        "duration" : 10221
      },
      "status" : "failed",
      "statusMessage" : "assert False is True\n +  where False = check_nhs_number_error_message_text_exists('Enter 10 digits')",
      "statusTrace" : "AssertionError: assert False is True\n +  where False = check_nhs_number_error_message_text_exists('Enter 10 digits')\n",
      "steps" : [ ],
      "attachments" : [ {
        "uid" : "86bc4cc765863595",
        "name" : "dev_chrome_130.0.6723.91_error_message_appears_for_nhs_number.png",
        "source" : "86bc4cc765863595.png",
        "type" : "image/png",
        "size" : 56101
      } ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 1,
      "shouldDisplayMessage" : true,
      "hasContent" : true
    } ],
    "attachments" : [ {
      "uid" : "63ce13db6cca78f5",
      "name" : "log",
      "source" : "63ce13db6cca78f5.txt",
      "type" : "text/plain",
      "size" : 1605
    } ],
    "parameters" : [ ],
    "stepsCount" : 4,
    "attachmentsCount" : 2,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "host",
    "value" : "ffdd1db22aac"
  }, {
    "name" : "thread",
    "value" : "1103-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest-bdd"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "feature",
    "value" : "Find a patient"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "errorMessage",
    "value" : "Enter 10 digits"
  }, {
    "name" : "nhsNumber",
    "value" : "123456789"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ ]
  },
  "source" : "57d669e88f4f1558.json",
  "parameterValues" : [ "Enter 10 digits", "123456789" ]
}