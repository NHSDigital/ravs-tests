{
  "uid" : "b59f685a8820d0d4",
  "name" : "Search without entering patient details",
  "fullName" : "/app/features/find_a_patient.feature:Search without entering patient details",
  "historyId" : "6d3ecbed8a34389c2d17a31baab210b7",
  "time" : {
    "start" : 1732007243002,
    "stop" : 1732007254554,
    "duration" : 11552
  },
  "status" : "failed",
  "statusMessage" : "AssertionError: assert False == True\n +  where False = check_required_field_error_appears_for_dob(False)",
  "statusTrace" : "fixturefunc = <function the_alert_messages_should_appear_forename_surname_dob_gender_postcode at 0x7f0bb8552d40>\nrequest = <FixtureRequest for <Function test_search_without_entering_patient_details>>\nkwargs = {}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n.tox/py311/lib/python3.11/site-packages/_pytest/fixtures.py:898: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n    @then('the alert messages should appear for Forename, Surname, Date Of Birth, Gender and Postcode')\n    def the_alert_messages_should_appear_forename_surname_dob_gender_postcode():\n        attach_screenshot(\"alert_messages_should_appear_for_missing_fields\")\n        assert check_required_field_error_appears_for_forename(False) == True\n        assert check_required_field_error_appears_for_surname(False) == True\n>       assert check_required_field_error_appears_for_dob(False) == True\nE       assert False == True\nE        +  where False = check_required_field_error_appears_for_dob(False)\n\ntests/test_find_a_patient_steps.py:137: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "newBroken" : false,
  "newPassed" : false,
  "retriesCount" : 0,
  "retriesStatusChange" : false,
  "beforeStages" : [ ],
  "testStage" : {
    "status" : "failed",
    "statusMessage" : "AssertionError: assert False == True\n +  where False = check_required_field_error_appears_for_dob(False)",
    "statusTrace" : "fixturefunc = <function the_alert_messages_should_appear_forename_surname_dob_gender_postcode at 0x7f0bb8552d40>\nrequest = <FixtureRequest for <Function test_search_without_entering_patient_details>>\nkwargs = {}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n.tox/py311/lib/python3.11/site-packages/_pytest/fixtures.py:898: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n    @then('the alert messages should appear for Forename, Surname, Date Of Birth, Gender and Postcode')\n    def the_alert_messages_should_appear_forename_surname_dob_gender_postcode():\n        attach_screenshot(\"alert_messages_should_appear_for_missing_fields\")\n        assert check_required_field_error_appears_for_forename(False) == True\n        assert check_required_field_error_appears_for_surname(False) == True\n>       assert check_required_field_error_appears_for_dob(False) == True\nE       assert False == True\nE        +  where False = check_required_field_error_appears_for_dob(False)\n\ntests/test_find_a_patient_steps.py:137: AssertionError",
    "steps" : [ {
      "name" : "Given I am on the find a patient by pds details page",
      "time" : {
        "start" : 1732007243002,
        "stop" : 1732007251805,
        "duration" : 8803
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "When I click the search button",
      "time" : {
        "start" : 1732007251806,
        "stop" : 1732007253931,
        "duration" : 2125
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "Then the alert messages should appear for Forename, Surname, Date Of Birth, Gender and Postcode",
      "time" : {
        "start" : 1732007253932,
        "stop" : 1732007254554,
        "duration" : 622
      },
      "status" : "failed",
      "statusMessage" : "assert False == True\n +  where False = check_required_field_error_appears_for_dob(False)",
      "statusTrace" : "AssertionError: assert False == True\n +  where False = check_required_field_error_appears_for_dob(False)\n",
      "steps" : [ ],
      "attachments" : [ {
        "uid" : "5fc14e98f14e5d2c",
        "name" : "dev_edge_131.0.2903.51_alert_messages_should_appear_for_missing_fields.png",
        "source" : "5fc14e98f14e5d2c.png",
        "type" : "image/png",
        "size" : 39632
      } ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 1,
      "shouldDisplayMessage" : true,
      "hasContent" : true
    } ],
    "attachments" : [ {
      "uid" : "9b1e492d97a610ff",
      "name" : "log",
      "source" : "9b1e492d97a610ff.txt",
      "type" : "text/plain",
      "size" : 1634
    } ],
    "parameters" : [ ],
    "stepsCount" : 3,
    "attachmentsCount" : 2,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "host",
    "value" : "4e7bb9bf6888"
  }, {
    "name" : "thread",
    "value" : "1099-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest-bdd"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "feature",
    "value" : "Find a patient"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ ]
  },
  "source" : "b59f685a8820d0d4.json",
  "parameterValues" : [ ]
}