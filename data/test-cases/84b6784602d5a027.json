{
  "uid" : "84b6784602d5a027",
  "name" : "Display warning based on age when recording a vaccine [9692237893-3-covid]",
  "fullName" : "features/age_based_warnings.feature:Display warning based on age when recording a vaccine",
  "historyId" : "eb7473c685934417e0e1bded91e819c3",
  "time" : {
    "start" : 1730790692478,
    "stop" : 1730790784864,
    "duration" : 92386
  },
  "status" : "failed",
  "statusMessage" : "Failed: An error occurred: Locator.is_enabled: Timeout 30000ms exceeded.\nCall log:\nwaiting for locator(\"#ConsentClinicianId\")",
  "statusTrace" : "element = <Locator frame=<Frame name= url='https://www.ravs-qa.england.nhs.uk/vaccination/add/111'> selector='#ConsentClinicianId'>\nwait = False\n\n    def check_element_enabled(element, wait=False):\n        if isinstance(element, (tuple, list)):\n            element = get_element_by_type(*element)\n        elif isinstance(element, str):\n            element = get_element_by_type(element)\n        try:\n>           return playwright_helper_instance.check_element_enabled(element, wait)\n\ninit_helpers.py:188: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nhelpers/playwrightHelper.py:175: in check_element_enabled\n    return element.is_enabled()\n.tox/py311/lib/python3.11/site-packages/playwright/sync_api/_generated.py:16961: in is_enabled\n    self._sync(self._impl_obj.is_enabled(timeout=timeout))\n.tox/py311/lib/python3.11/site-packages/playwright/_impl/_locator.py:484: in is_enabled\n    return await self._frame.is_editable(\n.tox/py311/lib/python3.11/site-packages/playwright/_impl/_frame.py:339: in is_editable\n    return await self._channel.send(\"isEditable\", locals_to_params(locals()))\n.tox/py311/lib/python3.11/site-packages/playwright/_impl/_connection.py:59: in send\n    return await self._connection.wrap_api_call(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <playwright._impl._connection.Connection object at 0x7f586c49ed50>\ncb = <function Channel.send.<locals>.<lambda> at 0x7f5865c1aca0>\nis_internal = False\n\n    async def wrap_api_call(\n        self, cb: Callable[[], Any], is_internal: bool = False\n    ) -> Any:\n        if self._api_zone.get():\n            return await cb()\n        task = asyncio.current_task(self._loop)\n        st: List[inspect.FrameInfo] = getattr(task, \"__pw_stack__\", inspect.stack())\n        parsed_st = _extract_stack_trace_information_from_stack(st, is_internal)\n        self._api_zone.set(parsed_st)\n        try:\n            return await cb()\n        except Exception as error:\n>           raise rewrite_error(error, f\"{parsed_st['apiName']}: {error}\") from None\nE           playwright._impl._errors.TimeoutError: Locator.is_enabled: Timeout 30000ms exceeded.\nE           Call log:\nE           waiting for locator(\"#ConsentClinicianId\")\n\n.tox/py311/lib/python3.11/site-packages/playwright/_impl/_connection.py:520: TimeoutError\n\nDuring handling of the above exception, another exception occurred:\n\nfixturefunc = <function step_warning_messages_should_be_displayed at 0x7f586c4f9c60>\nrequest = <FixtureRequest for <Function test_display_warning_based_on_age_when_recording_a_vaccine[9692237893-3-covid]>>\nkwargs = {'expected_warning_count': '3', 'shared_data': {'assessment_comments': 'Assessment comments 05/11/2024', 'chosen_vaccine': 'COVID-19', 'consent_clinician_details': 'Test Clinicians - test@nhs.net', 'consent_decision': 'yes', ...}}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n.tox/py311/lib/python3.11/site-packages/_pytest/fixtures.py:898: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests/test_age_based_warnings_steps.py:96: in step_warning_messages_should_be_displayed\n    record_consent_details_and_click_continue_to_vaccinate(shared_data['consent_decision'],shared_data['consent_given_by'], name_of_person_consenting, relationship_to_patient, shared_data['consent_clinician_details'], shared_data[\"no_consent_reason\"])\nconftest.py:329: in record_consent_details_and_click_continue_to_vaccinate\n    select_consent_clinician_with_name_and_council(consent_clinician)\npages/record_consent_page.py:30: in select_consent_clinician_with_name_and_council\n    if check_element_enabled(CONSENT_CLINICIAN_DROPDOWN_ELEMENT):\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nelement = <Locator frame=<Frame name= url='https://www.ravs-qa.england.nhs.uk/vaccination/add/111'> selector='#ConsentClinicianId'>\nwait = False\n\n    def check_element_enabled(element, wait=False):\n        if isinstance(element, (tuple, list)):\n            element = get_element_by_type(*element)\n        elif isinstance(element, str):\n            element = get_element_by_type(element)\n        try:\n            return playwright_helper_instance.check_element_enabled(element, wait)\n        except Exception as e:\n>           pytest.fail(f\"An error occurred: {e}\")\nE           Failed: An error occurred: Locator.is_enabled: Timeout 30000ms exceeded.\nE           Call log:\nE           waiting for locator(\"#ConsentClinicianId\")\n\ninit_helpers.py:190: Failed",
  "flaky" : false,
  "newFailed" : false,
  "newBroken" : false,
  "newPassed" : false,
  "retriesCount" : 0,
  "retriesStatusChange" : false,
  "beforeStages" : [ ],
  "testStage" : {
    "status" : "failed",
    "statusMessage" : "Failed: An error occurred: Locator.is_enabled: Timeout 30000ms exceeded.\nCall log:\nwaiting for locator(\"#ConsentClinicianId\")",
    "statusTrace" : "element = <Locator frame=<Frame name= url='https://www.ravs-qa.england.nhs.uk/vaccination/add/111'> selector='#ConsentClinicianId'>\nwait = False\n\n    def check_element_enabled(element, wait=False):\n        if isinstance(element, (tuple, list)):\n            element = get_element_by_type(*element)\n        elif isinstance(element, str):\n            element = get_element_by_type(element)\n        try:\n>           return playwright_helper_instance.check_element_enabled(element, wait)\n\ninit_helpers.py:188: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nhelpers/playwrightHelper.py:175: in check_element_enabled\n    return element.is_enabled()\n.tox/py311/lib/python3.11/site-packages/playwright/sync_api/_generated.py:16961: in is_enabled\n    self._sync(self._impl_obj.is_enabled(timeout=timeout))\n.tox/py311/lib/python3.11/site-packages/playwright/_impl/_locator.py:484: in is_enabled\n    return await self._frame.is_editable(\n.tox/py311/lib/python3.11/site-packages/playwright/_impl/_frame.py:339: in is_editable\n    return await self._channel.send(\"isEditable\", locals_to_params(locals()))\n.tox/py311/lib/python3.11/site-packages/playwright/_impl/_connection.py:59: in send\n    return await self._connection.wrap_api_call(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <playwright._impl._connection.Connection object at 0x7f586c49ed50>\ncb = <function Channel.send.<locals>.<lambda> at 0x7f5865c1aca0>\nis_internal = False\n\n    async def wrap_api_call(\n        self, cb: Callable[[], Any], is_internal: bool = False\n    ) -> Any:\n        if self._api_zone.get():\n            return await cb()\n        task = asyncio.current_task(self._loop)\n        st: List[inspect.FrameInfo] = getattr(task, \"__pw_stack__\", inspect.stack())\n        parsed_st = _extract_stack_trace_information_from_stack(st, is_internal)\n        self._api_zone.set(parsed_st)\n        try:\n            return await cb()\n        except Exception as error:\n>           raise rewrite_error(error, f\"{parsed_st['apiName']}: {error}\") from None\nE           playwright._impl._errors.TimeoutError: Locator.is_enabled: Timeout 30000ms exceeded.\nE           Call log:\nE           waiting for locator(\"#ConsentClinicianId\")\n\n.tox/py311/lib/python3.11/site-packages/playwright/_impl/_connection.py:520: TimeoutError\n\nDuring handling of the above exception, another exception occurred:\n\nfixturefunc = <function step_warning_messages_should_be_displayed at 0x7f586c4f9c60>\nrequest = <FixtureRequest for <Function test_display_warning_based_on_age_when_recording_a_vaccine[9692237893-3-covid]>>\nkwargs = {'expected_warning_count': '3', 'shared_data': {'assessment_comments': 'Assessment comments 05/11/2024', 'chosen_vaccine': 'COVID-19', 'consent_clinician_details': 'Test Clinicians - test@nhs.net', 'consent_decision': 'yes', ...}}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n.tox/py311/lib/python3.11/site-packages/_pytest/fixtures.py:898: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests/test_age_based_warnings_steps.py:96: in step_warning_messages_should_be_displayed\n    record_consent_details_and_click_continue_to_vaccinate(shared_data['consent_decision'],shared_data['consent_given_by'], name_of_person_consenting, relationship_to_patient, shared_data['consent_clinician_details'], shared_data[\"no_consent_reason\"])\nconftest.py:329: in record_consent_details_and_click_continue_to_vaccinate\n    select_consent_clinician_with_name_and_council(consent_clinician)\npages/record_consent_page.py:30: in select_consent_clinician_with_name_and_council\n    if check_element_enabled(CONSENT_CLINICIAN_DROPDOWN_ELEMENT):\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nelement = <Locator frame=<Frame name= url='https://www.ravs-qa.england.nhs.uk/vaccination/add/111'> selector='#ConsentClinicianId'>\nwait = False\n\n    def check_element_enabled(element, wait=False):\n        if isinstance(element, (tuple, list)):\n            element = get_element_by_type(*element)\n        elif isinstance(element, str):\n            element = get_element_by_type(element)\n        try:\n            return playwright_helper_instance.check_element_enabled(element, wait)\n        except Exception as e:\n>           pytest.fail(f\"An error occurred: {e}\")\nE           Failed: An error occurred: Locator.is_enabled: Timeout 30000ms exceeded.\nE           Call log:\nE           waiting for locator(\"#ConsentClinicianId\")\n\ninit_helpers.py:190: Failed",
    "steps" : [ {
      "name" : "Given I am logged into the RAVS app",
      "time" : {
        "start" : 1730790692478,
        "stop" : 1730790697802,
        "duration" : 5324
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "When I search for the patient with NHS number 9692237893",
      "time" : {
        "start" : 1730790697802,
        "stop" : 1730790697997,
        "duration" : 195
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "And I proceed to record a vaccine for covid for all products",
      "time" : {
        "start" : 1730790697998,
        "stop" : 1730790699324,
        "duration" : 1326
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ {
        "uid" : "5c04f8d8e8d532bc",
        "name" : "qa_chrome_130.0.6723.91_clicked_patient_name.png",
        "source" : "5c04f8d8e8d532bc.png",
        "type" : "image/png",
        "size" : 31494
      } ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 1,
      "shouldDisplayMessage" : false,
      "hasContent" : true
    }, {
      "name" : "Then the system should display the warnings 3",
      "time" : {
        "start" : 1730790699324,
        "stop" : 1730790785024,
        "duration" : 85700
      },
      "status" : "skipped",
      "steps" : [ ],
      "attachments" : [ {
        "uid" : "5ffc97b46219834f",
        "name" : "qa_chrome_130.0.6723.91_clicked_choose_vaccine_button.png",
        "source" : "5ffc97b46219834f.png",
        "type" : "image/png",
        "size" : 54113
      }, {
        "uid" : "902dd26c8d6dbbf",
        "name" : "qa_chrome_130.0.6723.91_clicked_eligibility_yes_and_selected_eligibility_type.png",
        "source" : "902dd26c8d6dbbf.png",
        "type" : "image/png",
        "size" : 71540
      }, {
        "uid" : "1673bba82d456745",
        "name" : "qa_chrome_130.0.6723.91_clicked_patient_give_vaccine_radio_button.png",
        "source" : "1673bba82d456745.png",
        "type" : "image/png",
        "size" : 45134
      }, {
        "uid" : "1cb3ed4608c42103",
        "name" : "qa_chrome_130.0.6723.91_clicked_continue_to_record_consent_button.png",
        "source" : "1cb3ed4608c42103.png",
        "type" : "image/png",
        "size" : 43892
      }, {
        "uid" : "b135cbe74aa1d67f",
        "name" : "qa_chrome_130.0.6723.91_before_selecting_consent_clinician.png",
        "source" : "b135cbe74aa1d67f.png",
        "type" : "image/png",
        "size" : 43892
      } ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 5,
      "shouldDisplayMessage" : false,
      "hasContent" : true
    } ],
    "attachments" : [ {
      "uid" : "1e7148a840ad4bc",
      "name" : "log",
      "source" : "1e7148a840ad4bc.txt",
      "type" : "text/plain",
      "size" : 3510
    } ],
    "parameters" : [ ],
    "stepsCount" : 4,
    "attachmentsCount" : 7,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "host",
    "value" : "167b9e0fcda5"
  }, {
    "name" : "thread",
    "value" : "1097-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest-bdd"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "feature",
    "value" : "Age based warnings"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "expected_warning_count",
    "value" : "3"
  }, {
    "name" : "nhs_number",
    "value" : "9692237893"
  }, {
    "name" : "vaccine_type",
    "value" : "covid"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ ]
  },
  "source" : "84b6784602d5a027.json",
  "parameterValues" : [ "3", "9692237893", "covid" ]
}