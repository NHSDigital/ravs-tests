{
  "uid" : "1a7b0a073c311672",
  "name" : "Demographics: Search with an invalid postcode shows an error message [Bill-Garton-23/6/1946-INVALID]",
  "fullName" : "/app/features/find_a_patient.feature:Demographics: Search with an invalid postcode shows an error message",
  "historyId" : "1d569f2af68e5863c8cc60a0660126e6",
  "time" : {
    "start" : 1730190703561,
    "stop" : 1730190958455,
    "duration" : 254894
  },
  "status" : "failed",
  "statusMessage" : "AssertionError: assert False is True\n +  where False = check_postcode_invalid_error_message_text_exists()",
  "statusTrace" : "fixturefunc = <function step_error_message_appears_for_postcode at 0x7f0f3a656200>\nrequest = <FixtureRequest for <Function test_demographics_search_with_an_invalid_postcode_shows_an_error_message[Bill-Garton-23/6/1946-INVALID]>>\nkwargs = {'errorMessage': 'Enter the full postcode in the correct format'}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n.tox/py311/lib/python3.11/site-packages/_pytest/fixtures.py:898: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nerrorMessage = 'Enter the full postcode in the correct format'\n\n    @then(parse('I can see a postcode error message {errorMessage}'))\n    def step_error_message_appears_for_postcode(errorMessage):\n        attach_screenshot(\"error_message_appears_for_postcode\")\n>       assert check_postcode_invalid_error_message_text_exists() is True\nE       assert False is True\nE        +  where False = check_postcode_invalid_error_message_text_exists()\n\ntests/test_find_a_patient_steps.py:169: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "newBroken" : false,
  "newPassed" : false,
  "retriesCount" : 0,
  "retriesStatusChange" : false,
  "beforeStages" : [ ],
  "testStage" : {
    "status" : "failed",
    "statusMessage" : "AssertionError: assert False is True\n +  where False = check_postcode_invalid_error_message_text_exists()",
    "statusTrace" : "fixturefunc = <function step_error_message_appears_for_postcode at 0x7f0f3a656200>\nrequest = <FixtureRequest for <Function test_demographics_search_with_an_invalid_postcode_shows_an_error_message[Bill-Garton-23/6/1946-INVALID]>>\nkwargs = {'errorMessage': 'Enter the full postcode in the correct format'}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n.tox/py311/lib/python3.11/site-packages/_pytest/fixtures.py:898: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nerrorMessage = 'Enter the full postcode in the correct format'\n\n    @then(parse('I can see a postcode error message {errorMessage}'))\n    def step_error_message_appears_for_postcode(errorMessage):\n        attach_screenshot(\"error_message_appears_for_postcode\")\n>       assert check_postcode_invalid_error_message_text_exists() is True\nE       assert False is True\nE        +  where False = check_postcode_invalid_error_message_text_exists()\n\ntests/test_find_a_patient_steps.py:169: AssertionError",
    "steps" : [ {
      "name" : "Given I am on the find a patient by demographics page",
      "time" : {
        "start" : 1730190703561,
        "stop" : 1730190816113,
        "duration" : 112552
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "And I enter the mandatory patient details Bill, Garton, and 23/6/1946",
      "time" : {
        "start" : 1730190816114,
        "stop" : 1730190917718,
        "duration" : 101604
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ {
        "uid" : "db02f086b4944282",
        "name" : "dev_chrome_130.0.6723.69_add_mandatory_patient_information.png",
        "source" : "db02f086b4944282.png",
        "type" : "image/png",
        "size" : 4331
      } ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 1,
      "shouldDisplayMessage" : false,
      "hasContent" : true
    }, {
      "name" : "When I enter the postcode INVALID",
      "time" : {
        "start" : 1730190917718,
        "stop" : 1730190938083,
        "duration" : 20365
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ {
        "uid" : "c959139aa19228ef",
        "name" : "dev_chrome_130.0.6723.69_enter_invalid_postcode.png",
        "source" : "c959139aa19228ef.png",
        "type" : "image/png",
        "size" : 4331
      } ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 1,
      "shouldDisplayMessage" : false,
      "hasContent" : true
    }, {
      "name" : "When I click the search button",
      "time" : {
        "start" : 1730190938083,
        "stop" : 1730190958397,
        "duration" : 20314
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "Then I can see a postcode error message Enter the full postcode in the correct format",
      "time" : {
        "start" : 1730190958398,
        "stop" : 1730190958455,
        "duration" : 57
      },
      "status" : "failed",
      "statusMessage" : "assert False is True\n +  where False = check_postcode_invalid_error_message_text_exists()",
      "statusTrace" : "AssertionError: assert False is True\n +  where False = check_postcode_invalid_error_message_text_exists()\n",
      "steps" : [ ],
      "attachments" : [ {
        "uid" : "c7a3a062680eb94c",
        "name" : "dev_chrome_130.0.6723.69_error_message_appears_for_postcode.png",
        "source" : "c7a3a062680eb94c.png",
        "type" : "image/png",
        "size" : 4331
      } ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 1,
      "shouldDisplayMessage" : true,
      "hasContent" : true
    } ],
    "attachments" : [ {
      "uid" : "d053186ea6087b74",
      "name" : "log",
      "source" : "d053186ea6087b74.txt",
      "type" : "text/plain",
      "size" : 2663
    } ],
    "parameters" : [ ],
    "stepsCount" : 5,
    "attachmentsCount" : 4,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "host",
    "value" : "7c0be77e3f3d"
  }, {
    "name" : "thread",
    "value" : "1102-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest-bdd"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "feature",
    "value" : "Find a patient"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "dob",
    "value" : "23/6/1946"
  }, {
    "name" : "firstName",
    "value" : "Bill"
  }, {
    "name" : "lastName",
    "value" : "Garton"
  }, {
    "name" : "postcode",
    "value" : "INVALID"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ ]
  },
  "source" : "1a7b0a073c311672.json",
  "parameterValues" : [ "23/6/1946", "Bill", "Garton", "INVALID" ]
}