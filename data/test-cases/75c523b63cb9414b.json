{
  "uid" : "75c523b63cb9414b",
  "name" : "Sign in should fail based on credentials provided [None-password-fail]",
  "fullName" : "features/login.feature:Sign in should fail based on credentials provided",
  "historyId" : "d2c24c8abd1adc5c5727ab0f09b7aa74",
  "time" : {
    "start" : 1728573193918,
    "stop" : 1728573225788,
    "duration" : 31870
  },
  "status" : "failed",
  "statusMessage" : "AssertionError: assert False\n +  where False = check_emailAddress_error_alert_exists()",
  "statusTrace" : "fixturefunc = <function verify_signin_status at 0x7f22dc4fd300>\nrequest = <FixtureRequest for <Function test_sign_in_should_fail_based_on_credentials_provided[None-password-fail]>>\nkwargs = {'shared_data': {'emailAddress': 'None', 'password': 'password'}, 'status': 'fail'}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n.tox/py311/lib/python3.11/site-packages/_pytest/fixtures.py:898: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nstatus = 'fail', shared_data = {'emailAddress': 'None', 'password': 'password'}\n\n    @then(parse(\"sign in should {status}\"))\n    @then(\"sign in should <status>\")\n    def verify_signin_status(status, shared_data):\n        attach_screenshot(\"sign_in_should_\" + status)\n        data = shared_data\n        if status.lower() == \"fail\":\n            if data['password'] == \"None\" and \"valid\" not in data[\"emailAddress\"].lower():\n                assert check_password_error_alert_exists()\n                assert get_password_missing_error_text() == \"This field cannot be left blank\"\n            elif data['emailAddress'] == \"None\" and \"valid\" not in data[\"emailAddress\"].lower():\n                click_nhs_signin_button()\n>               assert check_emailAddress_error_alert_exists()\nE               assert False\nE                +  where False = check_emailAddress_error_alert_exists()\n\ntests/test_login_steps.py:101: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "newBroken" : false,
  "newPassed" : false,
  "retriesCount" : 0,
  "retriesStatusChange" : false,
  "beforeStages" : [ ],
  "testStage" : {
    "status" : "failed",
    "statusMessage" : "AssertionError: assert False\n +  where False = check_emailAddress_error_alert_exists()",
    "statusTrace" : "fixturefunc = <function verify_signin_status at 0x7f22dc4fd300>\nrequest = <FixtureRequest for <Function test_sign_in_should_fail_based_on_credentials_provided[None-password-fail]>>\nkwargs = {'shared_data': {'emailAddress': 'None', 'password': 'password'}, 'status': 'fail'}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n.tox/py311/lib/python3.11/site-packages/_pytest/fixtures.py:898: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nstatus = 'fail', shared_data = {'emailAddress': 'None', 'password': 'password'}\n\n    @then(parse(\"sign in should {status}\"))\n    @then(\"sign in should <status>\")\n    def verify_signin_status(status, shared_data):\n        attach_screenshot(\"sign_in_should_\" + status)\n        data = shared_data\n        if status.lower() == \"fail\":\n            if data['password'] == \"None\" and \"valid\" not in data[\"emailAddress\"].lower():\n                assert check_password_error_alert_exists()\n                assert get_password_missing_error_text() == \"This field cannot be left blank\"\n            elif data['emailAddress'] == \"None\" and \"valid\" not in data[\"emailAddress\"].lower():\n                click_nhs_signin_button()\n>               assert check_emailAddress_error_alert_exists()\nE               assert False\nE                +  where False = check_emailAddress_error_alert_exists()\n\ntests/test_login_steps.py:101: AssertionError",
    "steps" : [ {
      "name" : "Given I access the ravs web app",
      "time" : {
        "start" : 1728573193919,
        "stop" : 1728573194473,
        "duration" : 554
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "When I click on the log in button",
      "time" : {
        "start" : 1728573194474,
        "stop" : 1728573194979,
        "duration" : 505
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "And I provide the None and password",
      "time" : {
        "start" : 1728573194979,
        "stop" : 1728573195514,
        "duration" : 535
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "And the NHS sign in button is clicked",
      "time" : {
        "start" : 1728573195514,
        "stop" : 1728573195582,
        "duration" : 68
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "Then sign in should fail",
      "time" : {
        "start" : 1728573195583,
        "stop" : 1728573225788,
        "duration" : 30205
      },
      "status" : "failed",
      "statusMessage" : "assert False\n +  where False = check_emailAddress_error_alert_exists()",
      "statusTrace" : "AssertionError: assert False\n +  where False = check_emailAddress_error_alert_exists()\n",
      "steps" : [ ],
      "attachments" : [ {
        "uid" : "53dcdbce605d0b65",
        "name" : "data/attachments/dev_chrome_129.0.6668.100_sign_in_should_fail.png",
        "source" : "53dcdbce605d0b65.png",
        "type" : "image/png",
        "size" : 41594
      } ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 1,
      "shouldDisplayMessage" : true,
      "hasContent" : true
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 5,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "host",
    "value" : "1d6251f1455e"
  }, {
    "name" : "thread",
    "value" : "1040-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest-bdd"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "feature",
    "value" : "Login Feature"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "emailAddress",
    "value" : "None"
  }, {
    "name" : "password",
    "value" : "password"
  }, {
    "name" : "status",
    "value" : "fail"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ ]
  },
  "source" : "75c523b63cb9414b.json",
  "parameterValues" : [ "None", "password", "fail" ]
}