{
  "uid" : "57c01f77bd533999",
  "name" : "Local: Created patient can be found using local search",
  "fullName" : "/app/features/find_a_patient.feature:Local: Created patient can be found using local search",
  "historyId" : "318f11c97be2b8bb6bebbd84c9bce5b1",
  "time" : {
    "start" : 1730272463516,
    "stop" : 1730272703999,
    "duration" : 240483
  },
  "status" : "failed",
  "statusMessage" : "TypeError: argument of type 'NoneType' is not iterable",
  "statusTrace" : "fixturefunc = <function step_patient_information_page_should_be_available at 0x7ff34c56c7c0>\nrequest = <FixtureRequest for <Function test_local_created_patient_can_be_found_using_local_search>>\nkwargs = {'shared_data': {'dob': '16/7/1965', 'first_name': 'Liam', 'gender': 'Female', 'last_name': 'Clements', ...}}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n.tox/py311/lib/python3.11/site-packages/_pytest/fixtures.py:898: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nshared_data = {'dob': '16/7/1965', 'first_name': 'Liam', 'gender': 'Female', 'last_name': 'Clements', ...}\n\n    @then(\"I can check and confirm the patient information is correct\")\n    def step_patient_information_page_should_be_available(shared_data):\n        attach_screenshot(\"patient_information_is_correct\")\n>       assert shared_data[\"first_name\"] in get_first_name_field_text()\nE       TypeError: argument of type 'NoneType' is not iterable\n\ntests/test_find_a_patient_steps.py:283: TypeError",
  "flaky" : false,
  "newFailed" : false,
  "newBroken" : false,
  "newPassed" : false,
  "retriesCount" : 0,
  "retriesStatusChange" : false,
  "beforeStages" : [ ],
  "testStage" : {
    "status" : "failed",
    "statusMessage" : "TypeError: argument of type 'NoneType' is not iterable",
    "statusTrace" : "fixturefunc = <function step_patient_information_page_should_be_available at 0x7ff34c56c7c0>\nrequest = <FixtureRequest for <Function test_local_created_patient_can_be_found_using_local_search>>\nkwargs = {'shared_data': {'dob': '16/7/1965', 'first_name': 'Liam', 'gender': 'Female', 'last_name': 'Clements', ...}}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n.tox/py311/lib/python3.11/site-packages/_pytest/fixtures.py:898: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nshared_data = {'dob': '16/7/1965', 'first_name': 'Liam', 'gender': 'Female', 'last_name': 'Clements', ...}\n\n    @then(\"I can check and confirm the patient information is correct\")\n    def step_patient_information_page_should_be_available(shared_data):\n        attach_screenshot(\"patient_information_is_correct\")\n>       assert shared_data[\"first_name\"] in get_first_name_field_text()\nE       TypeError: argument of type 'NoneType' is not iterable\n\ntests/test_find_a_patient_steps.py:283: TypeError",
    "steps" : [ {
      "name" : "Given I am on the find a patient by demographics page",
      "time" : {
        "start" : 1730272463516,
        "stop" : 1730272468771,
        "duration" : 5255
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "And I generate random data for a new patient",
      "time" : {
        "start" : 1730272468772,
        "stop" : 1730272468772,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "And I enter the new patient details on find by demographics page",
      "time" : {
        "start" : 1730272468772,
        "stop" : 1730272489673,
        "duration" : 20901
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ {
        "uid" : "b162a4c2d4f150ec",
        "name" : "qa_chrome_130.0.6723.91_add_mandatory_new_patient_information.png",
        "source" : "b162a4c2d4f150ec.png",
        "type" : "image/png",
        "size" : 53330
      } ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 1,
      "shouldDisplayMessage" : false,
      "hasContent" : true
    }, {
      "name" : "And I click the search button",
      "time" : {
        "start" : 1730272489673,
        "stop" : 1730272490641,
        "duration" : 968
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "And I click the create a new patient button",
      "time" : {
        "start" : 1730272490641,
        "stop" : 1730272511034,
        "duration" : 20393
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "And I enter the new patient details on create a new patient page",
      "time" : {
        "start" : 1730272511035,
        "stop" : 1730272653564,
        "duration" : 142529
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ {
        "uid" : "32a3bb21c28b4230",
        "name" : "qa_chrome_130.0.6723.91_add_mandatory_new_patient_information.png",
        "source" : "32a3bb21c28b4230.png",
        "type" : "image/png",
        "size" : 49811
      } ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 1,
      "shouldDisplayMessage" : false,
      "hasContent" : true
    }, {
      "name" : "When I click the check and confirm button",
      "time" : {
        "start" : 1730272653565,
        "stop" : 1730272663754,
        "duration" : 10189
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "Then I can check and confirm the patient information is correct",
      "time" : {
        "start" : 1730272663755,
        "stop" : 1730272703999,
        "duration" : 40244
      },
      "status" : "failed",
      "statusMessage" : "argument of type 'NoneType' is not iterable",
      "statusTrace" : "TypeError: argument of type 'NoneType' is not iterable\n",
      "steps" : [ ],
      "attachments" : [ {
        "uid" : "2d20cc97b715cd66",
        "name" : "qa_chrome_130.0.6723.91_patient_information_is_correct.png",
        "source" : "2d20cc97b715cd66.png",
        "type" : "image/png",
        "size" : 49811
      } ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 1,
      "shouldDisplayMessage" : true,
      "hasContent" : true
    } ],
    "attachments" : [ {
      "uid" : "c5098a9d2e61b005",
      "name" : "log",
      "source" : "c5098a9d2e61b005.txt",
      "type" : "text/plain",
      "size" : 3592
    } ],
    "parameters" : [ ],
    "stepsCount" : 8,
    "attachmentsCount" : 4,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "host",
    "value" : "9634150af7bc"
  }, {
    "name" : "thread",
    "value" : "1097-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest-bdd"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "feature",
    "value" : "Find a patient"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ ]
  },
  "source" : "57c01f77bd533999.json",
  "parameterValues" : [ ]
}