{
  "uid" : "22b99b85e1ca37f4",
  "name" : "Demographics: Searching for a patient without a record returns no results [Cecile-Elston-18/01/1965]",
  "fullName" : "/app/features/find_a_patient.feature:Demographics: Searching for a patient without a record returns no results",
  "historyId" : "1b51f6a7f6d588f463a9a362437309b2",
  "time" : {
    "start" : 1730277034762,
    "stop" : 1730277309621,
    "duration" : 274859
  },
  "status" : "failed",
  "statusMessage" : "AssertionError: assert False == True\n +  where False = check_patient_not_found_message_exists(True)",
  "statusTrace" : "fixturefunc = <function step_assert_no_results_found_for_patient_message at 0x7fd07d91b240>\nrequest = <FixtureRequest for <Function test_demographics_searching_for_a_patient_without_a_record_returns_no_results[Cecile-Elston-18/01/1965]>>\nkwargs = {}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n.tox/py311/lib/python3.11/site-packages/_pytest/fixtures.py:898: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n    @then(\"I can see a message that no results are found for the patient\")\n    def step_assert_no_results_found_for_patient_message():\n        attach_screenshot(\"no_results_found_should_be_visible\")\n>       assert check_patient_not_found_message_exists(True) == True\nE       assert False == True\nE        +  where False = check_patient_not_found_message_exists(True)\n\ntests/test_find_a_patient_steps.py:211: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "newBroken" : false,
  "newPassed" : false,
  "retriesCount" : 0,
  "retriesStatusChange" : false,
  "beforeStages" : [ ],
  "testStage" : {
    "status" : "failed",
    "statusMessage" : "AssertionError: assert False == True\n +  where False = check_patient_not_found_message_exists(True)",
    "statusTrace" : "fixturefunc = <function step_assert_no_results_found_for_patient_message at 0x7fd07d91b240>\nrequest = <FixtureRequest for <Function test_demographics_searching_for_a_patient_without_a_record_returns_no_results[Cecile-Elston-18/01/1965]>>\nkwargs = {}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n.tox/py311/lib/python3.11/site-packages/_pytest/fixtures.py:898: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n    @then(\"I can see a message that no results are found for the patient\")\n    def step_assert_no_results_found_for_patient_message():\n        attach_screenshot(\"no_results_found_should_be_visible\")\n>       assert check_patient_not_found_message_exists(True) == True\nE       assert False == True\nE        +  where False = check_patient_not_found_message_exists(True)\n\ntests/test_find_a_patient_steps.py:211: AssertionError",
    "steps" : [ {
      "name" : "Given I am on the find a patient by demographics page",
      "time" : {
        "start" : 1730277034763,
        "stop" : 1730277177467,
        "duration" : 142704
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "And I enter the mandatory patient details Cecile, Elston, and 18/01/1965",
      "time" : {
        "start" : 1730277177467,
        "stop" : 1730277279080,
        "duration" : 101613
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ {
        "uid" : "c13db42b3f1ac457",
        "name" : "dev_chrome_130.0.6723.91_add_mandatory_patient_information.png",
        "source" : "c13db42b3f1ac457.png",
        "type" : "image/png",
        "size" : 56101
      } ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 1,
      "shouldDisplayMessage" : false,
      "hasContent" : true
    }, {
      "name" : "When I click the search button",
      "time" : {
        "start" : 1730277279081,
        "stop" : 1730277299406,
        "duration" : 20325
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "Then I can see a message that no results are found for the patient",
      "time" : {
        "start" : 1730277299407,
        "stop" : 1730277309621,
        "duration" : 10214
      },
      "status" : "failed",
      "statusMessage" : "assert False == True\n +  where False = check_patient_not_found_message_exists(True)",
      "statusTrace" : "AssertionError: assert False == True\n +  where False = check_patient_not_found_message_exists(True)\n",
      "steps" : [ ],
      "attachments" : [ {
        "uid" : "532df99f1eb2731b",
        "name" : "dev_chrome_130.0.6723.91_no_results_found_should_be_visible.png",
        "source" : "532df99f1eb2731b.png",
        "type" : "image/png",
        "size" : 56101
      } ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 1,
      "shouldDisplayMessage" : true,
      "hasContent" : true
    } ],
    "attachments" : [ {
      "uid" : "acdcf0c383a7a50c",
      "name" : "log",
      "source" : "acdcf0c383a7a50c.txt",
      "type" : "text/plain",
      "size" : 2050
    } ],
    "parameters" : [ ],
    "stepsCount" : 4,
    "attachmentsCount" : 3,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "host",
    "value" : "ffdd1db22aac"
  }, {
    "name" : "thread",
    "value" : "1100-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest-bdd"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "feature",
    "value" : "Find a patient"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "dob",
    "value" : "18/01/1965"
  }, {
    "name" : "firstName",
    "value" : "Cecile"
  }, {
    "name" : "lastName",
    "value" : "Elston"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ ]
  },
  "source" : "22b99b85e1ca37f4.json",
  "parameterValues" : [ "18/01/1965", "Cecile", "Elston" ]
}