{
  "uid" : "ffe59715d53652a4",
  "name" : "Demographics: Multiple demographic matches shows an error that more than one result is found [Aidan-Smith-23/02/2020]",
  "fullName" : "/app/features/find_a_patient.feature:Demographics: Multiple demographic matches shows an error that more than one result is found",
  "historyId" : "1c8cb41f30fceb416baf4c1b8bdba2ab",
  "time" : {
    "start" : 1730112411946,
    "stop" : 1730112428665,
    "duration" : 16719
  },
  "status" : "failed",
  "statusMessage" : "AssertionError: assert False == True\n +  where False = check_patient_multiple_results_found_message_exists(True)",
  "statusTrace" : "fixturefunc = <function step_assert_multiple_results_found_for_patient_message at 0x7f4561963420>\nrequest = <FixtureRequest for <Function test_demographics_multiple_demographic_matches_shows_an_error_that_more_than_one_result_is_found[Aidan-Smith-23/02/2020]>>\nkwargs = {}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n.tox/py311/lib/python3.11/site-packages/_pytest/fixtures.py:898: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n    @then(\"I can see a message that more than one result was found\")\n    def step_assert_multiple_results_found_for_patient_message():\n        attach_screenshot(\"multiple_results_found_should_be_visible\")\n>       assert check_patient_multiple_results_found_message_exists(True) == True\nE       assert False == True\nE        +  where False = check_patient_multiple_results_found_message_exists(True)\n\ntests/test_find_a_patient_steps.py:216: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "newBroken" : false,
  "newPassed" : false,
  "retriesCount" : 0,
  "retriesStatusChange" : false,
  "beforeStages" : [ ],
  "testStage" : {
    "status" : "failed",
    "statusMessage" : "AssertionError: assert False == True\n +  where False = check_patient_multiple_results_found_message_exists(True)",
    "statusTrace" : "fixturefunc = <function step_assert_multiple_results_found_for_patient_message at 0x7f4561963420>\nrequest = <FixtureRequest for <Function test_demographics_multiple_demographic_matches_shows_an_error_that_more_than_one_result_is_found[Aidan-Smith-23/02/2020]>>\nkwargs = {}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n.tox/py311/lib/python3.11/site-packages/_pytest/fixtures.py:898: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n    @then(\"I can see a message that more than one result was found\")\n    def step_assert_multiple_results_found_for_patient_message():\n        attach_screenshot(\"multiple_results_found_should_be_visible\")\n>       assert check_patient_multiple_results_found_message_exists(True) == True\nE       assert False == True\nE        +  where False = check_patient_multiple_results_found_message_exists(True)\n\ntests/test_find_a_patient_steps.py:216: AssertionError",
    "steps" : [ {
      "name" : "Given I am on the find a patient by demographics page",
      "time" : {
        "start" : 1730112411946,
        "stop" : 1730112417037,
        "duration" : 5091
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "And I enter the mandatory patient details Aidan, Smith, and 23/02/2020",
      "time" : {
        "start" : 1730112417038,
        "stop" : 1730112417457,
        "duration" : 419
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ {
        "uid" : "5fb0cb7e667bd2c0",
        "name" : "dev_chrome_130.0.6723.69_add_mandatory_patient_information.png",
        "source" : "5fb0cb7e667bd2c0.png",
        "type" : "image/png",
        "size" : 56903
      } ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 1,
      "shouldDisplayMessage" : false,
      "hasContent" : true
    }, {
      "name" : "When I click the search button",
      "time" : {
        "start" : 1730112417457,
        "stop" : 1730112418419,
        "duration" : 962
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "Then I can see a message that more than one result was found",
      "time" : {
        "start" : 1730112418420,
        "stop" : 1730112428665,
        "duration" : 10245
      },
      "status" : "failed",
      "statusMessage" : "assert False == True\n +  where False = check_patient_multiple_results_found_message_exists(True)",
      "statusTrace" : "AssertionError: assert False == True\n +  where False = check_patient_multiple_results_found_message_exists(True)\n",
      "steps" : [ ],
      "attachments" : [ {
        "uid" : "f62c9f8e7ee0d855",
        "name" : "dev_chrome_130.0.6723.69_multiple_results_found_should_be_visible.png",
        "source" : "f62c9f8e7ee0d855.png",
        "type" : "image/png",
        "size" : 31264
      } ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 1,
      "shouldDisplayMessage" : true,
      "hasContent" : true
    } ],
    "attachments" : [ {
      "uid" : "955797cbf71f422b",
      "name" : "log",
      "source" : "955797cbf71f422b.txt",
      "type" : "text/plain",
      "size" : 2048
    } ],
    "parameters" : [ ],
    "stepsCount" : 4,
    "attachmentsCount" : 3,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "host",
    "value" : "9fd36c357a1d"
  }, {
    "name" : "thread",
    "value" : "1102-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest-bdd"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "feature",
    "value" : "Find a patient"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "dob",
    "value" : "23/02/2020"
  }, {
    "name" : "firstName",
    "value" : "Aidan"
  }, {
    "name" : "lastName",
    "value" : "Smith"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ ]
  },
  "source" : "ffe59715d53652a4.json",
  "parameterValues" : [ "23/02/2020", "Aidan", "Smith" ]
}