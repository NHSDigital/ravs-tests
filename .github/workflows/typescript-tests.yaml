name: Typescript Tests

on:
  workflow_dispatch:
    inputs:
      marker:
        description: 'Test scenario tags'
        required: false
        type: string
        default: ''
      environment:
        description: 'Environment to run tests against'
        type: environment
        required: true
        default: "dev"
      browser:
        description: 'Browser to run tests on'
        type: choice
        options:
          - chrome
          - firefox
          - safari
          - edge
          - mobile
        required: false
        default: "edge"
      device:
        description: 'Device to run tests on'
        type: choice
        options:
          - iphone_12
          - iphone_11
          - pixel_5
        required: false
        default: "iphone_12"
      id:
        description: 'Unique run identifier'
        required: false
        default: "Manually Triggered Run"

  push:
    branches:
      - '**'

jobs:
  e2e-tests:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Code
      uses: actions/checkout@v3
      with:
        path: ts-tests

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: 22

    - name: Install Dependencies
      working-directory: ts-tests
      run: |
        npm install

    - name: Setup Environment Variables
      run: |
        echo "TEST_ENVIRONMENT=${{ inputs.environment || 'dev' }}" >> $GITHUB_ENV
        echo "BROWSER=${{ inputs.browser || 'edge' }}" >> $GITHUB_ENV
        echo "DEVICE=${{ inputs.device || 'iphone_12' }}" >> $GITHUB_ENV
        echo "HEADLESS_MODE=true" >> $GITHUB_ENV
        echo "TIMEOUT_SECONDS=60" >> $GITHUB_ENV
        echo "RAVS_PASSWORD=${{ secrets.RAVS_PASSWORD }}" >> $GITHUB_ENV

    - name: Run Playwright Tests
      working-directory: ts-tests
      env:
        CI: true
      run: |
        npm run test

    - name: Upload Test Results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results
        path: data/attachments/*.png

    - name: Generate Allure Report
      working-directory: ts-tests
      run: |
        npm run allure:generate
        npm run allure:serve

    - name: Upload Allure Report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: allure-report
        path: ts-tests/allure-report

    - name: Clean Up
      working-directory: ts-tests
      if: always()
      run: rm -rf allure-results allure-report
